apiVersion: apps/v1
kind: Deployment
metadata:
  name: spiderjs
  labels:
    app: spiderjs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spiderjs
  template:
    metadata:
      labels:
        app: spiderjs
    spec:
      containers:
      - name: spiderjs
        image: ibrahmsql/spiderjs:1.0.0
        imagePullPolicy: IfNotPresent
        command: ["spiderjs"]
        args: ["server", "--config", "/app/config/config.yaml"]
        ports:
        - containerPort: 8080
          name: http
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: ml-model-volume
          mountPath: /app/configs/ml
      volumes:
      - name: config-volume
        configMap:
          name: spiderjs-config
      - name: ml-model-volume
        configMap:
          name: spiderjs-ml-model
---
apiVersion: v1
kind: Service
metadata:
  name: spiderjs
  labels:
    app: spiderjs
spec:
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: spiderjs
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spiderjs-config
data:
  config.yaml: |
    log:
      level: "info"
      format: "json"
    
    server:
      host: "0.0.0.0"
      port: 8080
    
    ml:
      model_path: "/app/configs/ml/model.json"
      threshold: 0.7
    
    scanner:
      timeout: 30
      max_depth: 3
    
    database:
      mongodb:
        uri: "mongodb://spiderjs:spiderjs@mongodb:27017/spiderjs"
        database: "spiderjs"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spiderjs-ml-model
data:
  model.json: |
    {
      "name": "SpiderJS-ML-1.0",
      "version": "1.0.0",
      "description": "Machine learning model for JavaScript vulnerability detection",
      "features": [
        "has_user_input",
        "uses_eval",
        "uses_innerhtml",
        "uses_document_write",
        "uses_fetch_api",
        "has_jwt",
        "has_cors_headers",
        "has_csp_headers",
        "has_prototype_manipulation",
        "has_event_handlers"
      ],
      "thresholds": {
        "high": 0.8,
        "medium": 0.6,
        "low": 0.4
      },
      "weights": {
        "xss": [0.8, 0.7, 0.9, 0.9, 0.3, 0.1, -0.5, -0.7, 0.2, 0.6],
        "injection": [0.7, 0.8, 0.3, 0.4, 0.6, 0.2, 0.1, -0.3, 0.3, 0.2],
        "csrf": [0.5, 0.2, 0.3, 0.3, 0.7, 0.4, -0.2, -0.3, 0.1, 0.4],
        "prototype_pollution": [0.3, 0.4, 0.2, 0.2, 0.1, 0.1, 0.0, -0.1, 0.9, 0.3],
        "jwt_vulnerability": [0.2, 0.3, 0.1, 0.1, 0.5, 0.9, 0.1, -0.2, 0.1, 0.2]
      },
      "biases": {
        "xss": -0.5,
        "injection": -0.4,
        "csrf": -0.3,
        "prototype_pollution": -0.4,
        "jwt_vulnerability": -0.5
      },
      "unsafe_patterns": [
        "eval\\(",
        "Function\\(",
        "setTimeout\\(['\"][^'\"]+['\"]",
        "setInterval\\(['\"][^'\"]+['\"]",
        "document\\.write",
        "document\\.innerHtml",
        "innerHTML",
        "__proto__",
        "prototype"
      ]
    } 